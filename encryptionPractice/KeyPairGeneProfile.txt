Compiled from "KeyPairGenerator.java"
public abstract class java.security.KeyPairGenerator extends java.security.KeyPairGeneratorSpi {
  java.security.Provider provider;
  protected KeyPairGenerator(java.lang.String);
  public String getAlgorithm();
  public static KeyPairGenerator getInstance(String) throws NoSuchAlgorithmException;
  public static KeyPairGenerator getInstance(String, String) throws NoSuchAlgorithmException, NoSuchProviderException;
  public static KeyPairGenerator getInstance(String, Provider) throws NoSuchAlgorithmException;
  public final java.security.Provider getProvider();
  void disableFailover();
  public void initialize(int);
  public void initialize(int, SecureRandom);
  public void initialize(java.security.spec.AlgorithmParameterSpec) throws InvalidAlgorithmParameterException;
  public void initialize(java.security.spec.AlgorithmParameterSpec, SecureRandom) throws InvalidAlgorithmParameterException;
  public final KeyPair genKeyPair();
  public KeyPair generateKeyPair();
  static boolean access$000();
  static sun.security.util.Debug access$100();
  static {};
}
Compiled from "KeyPair.java"
public final class KeyPair implements java.io.Serializable {
  public KeyPair(PublicKey, PrivateKey);
  public PublicKey getPublic();
  public PrivateKey getPrivate();
}
Compiled from "Cipher.java"
public class javax.crypto.Cipher {
  public static final int ENCRYPT_MODE;
  public static final int DECRYPT_MODE;
  public static final int WRAP_MODE;
  public static final int UNWRAP_MODE;
  public static final int PUBLIC_KEY;
  public static final int PRIVATE_KEY;
  public static final int SECRET_KEY;
  protected CipherCipherSpi, Provider, String);
  Cipher(CipherSpi, String);
  public static final Cipher getInstance(String) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException;
  public static final Cipher getInstance(String, String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, javax.crypto.NoSuchPaddingException;
  public static final Cipher getInstance(String, Provider) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException;
  void chooseFirstProvider();
  public final Provider getProvider();
  public final String getAlgorithm();
  public final int getBlockSize();
  public final int getOutputSize(int);
  public final byte[] getIV();
  public final AlgorithmParameters getParameters();
  public final ExemptionMechanism getExemptionMechanism();
  public final void init(int, Key) throws java.security.InvalidKeyException;
  public final void init(int, Key, java.security.SecureRandom) throws java.security.InvalidKeyException;
  public final void init(int, Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;
  public final void init(int, Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;
  public final void init(int, Key, java.security.AlgorithmParameters) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;
  public final void init(int, Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException;
  public final void init(int, java.security.cert.Certificate) throws java.security.InvalidKeyException;
  public final void init(int, java.security.cert.Certificate, java.security.SecureRandom) throws java.security.InvalidKeyException;
  public final byte[] update(byte[]);
  public final byte[] update(byte[], int, int);
  public final int update(byte[], int, int, byte[]) throws javax.crypto.ShortBufferException;
  public final int update(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException;
  public final int update(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.crypto.ShortBufferException;
  public final byte[] doFinal() throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException;
  public final int doFinal(byte[], int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.ShortBufferException, javax.crypto.BadPaddingException;
  public final byte[] doFinal(byte[]) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException;
  public final byte[] doFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException;
  public final int doFinal(byte[], int, int, byte[]) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException;
  public final int doFinal(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException;
  public final int doFinal(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException;
  public final byte[] wrap(java.security.Key) throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException;
  public final java.security.Key unwrap(byte[], java.lang.String, int) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException;
  public static final int getMaxAllowedKeyLength(java.lang.String) throws java.security.NoSuchAlgorithmException;
  public static final java.security.spec.AlgorithmParameterSpec getMaxAllowedParameterSpec(java.lang.String) throws java.security.NoSuchAlgorithmException;
  public final void updateAAD(byte[]);
  public final void updateAAD(byte[], int, int);
  public final void updateAAD(java.nio.ByteBuffer);
  static {};
}
